#!/bin/bash

source $OPENSHIFT_CARTRIDGE_SDK_BASH
source "${OPENSHIFT_PYSNI_DIR}/usr/versions/${OPENSHIFT_PYSNI_VERSION}/lib/create-virtenv"

HTTPD_CFG_FILE=$OPENSHIFT_PYSNI_DIR/etc/conf/httpd_nolog.conf
HTTPD_PASSENV_FILE=$OPENSHIFT_PYSNI_DIR/etc/conf.d/passenv.conf
HTTPD_PID_FILE=$OPENSHIFT_PYSNI_DIR/run/httpd.pid

# For backwards compatibility
export APPDIR=$OPENSHIFT_PYSNI_DIR

function start_app() {
    cd "$OPENSHIFT_REPO_DIR"
    nohup python -u app.py > "$OPENSHIFT_PYSNI_DIR/logs/appserver.log" 2>&1 &
    echo $! > $OPENSHIFT_PYSNI_DIR/run/appserver.pid
}

function start() {
    if [ -f $VIRTUAL_ENV/.needs_build ]
    then
        build
    fi
    echo "Starting PYSNI cart"
    start_app
}

function stop_app() {
    if [ -s $OPENSHIFT_PYSNI_DIR/run/appserver.pid ]
    then
        kpid=$(cat $OPENSHIFT_PYSNI_DIR/run/appserver.pid)
        iters=0
        while kill $kpid >/dev/null 2>&1
        do
            iters=$(($iters + 1))
            [ $iters -gt 10 ] && break
            sleep 1
        done
        kill -KILL $kpid >/dev/null 2>&1 || :
        rm -f $OPENSHIFT_PYSNI_DIR/run/appserver.pid
    fi
}

function stop() {
    echo "Stopping PYSNI cart"
    stop_app
}

function restart() {
   echo "Restarting PYSNI cart"
   stop
   start
}

function status() {
    res=0
    output=$(curl -s -m 30 http://$OPENSHIFT_PYSNI_IP:$OPENSHIFT_PYSNI_PORT/ &> /dev/null) || res=1
    if [ $res -eq 0 ]
    then
        client_result "Application is running"
        client_result "$output"
    else
        client_result "Application is either stopped or inaccessible"
    fi
}

function reload() {
    echo "Reloading PYSNI cart"
    restart
}

# Clean up any log files
function tidy() {
  client_message "Emptying log dir: $OPENSHIFT_PYSNI_LOG_DIR"
  shopt -s dotglob
  rm -rf $OPENSHIFT_PYSNI_LOG_DIR/*
}

function build() {
    if `echo $OPENSHIFT_GEAR_DNS | egrep -qe "\.rhcloud\.com"`
    then
        m="http://mirror1.ops.rhcloud.com/mirror/python/web/simple"
        if curl -m 15 -f -s "$m" &>/dev/null
        then
            OPENSHIFT_PYSNI_MIRROR="-i $m"
        fi
    fi

    if marker_present 'force_clean_build'; then
        echo ".openshift/markers/force_clean_build found!" 1>&2
        rm -rf $VIRTUAL_ENV/*
    fi

    if [ ! -f $VIRTUAL_ENV/bin/python ]; then
      echo "Recreating virtenv" 1>&2
      create-virtenv
    fi

    if [ -f ${OPENSHIFT_REPO_DIR}/requirements.txt ]
    then
        ( cd $OPENSHIFT_REPO_DIR; pip install -r ${OPENSHIFT_REPO_DIR}/requirements.txt $OPENSHIFT_PYSNI_MIRROR )
    fi

    if [ -f ${OPENSHIFT_REPO_DIR}/setup.py ]
    then
        ( cd $OPENSHIFT_REPO_DIR; python ${OPENSHIFT_REPO_DIR}/setup.py develop $OPENSHIFT_PYSNI_MIRROR )
    fi

    relative-virtenv

    rm -f $VIRTUAL_ENV/.needs_build
}

function deploy() {
    relative-virtenv
}

case "$1" in
  start)     start ;;
  stop)      stop ;;
  restart)   restart ;;
  status)    status ;;
  reload)    reload ;;
  tidy)      tidy ;;
  build)     build ;;
  deploy)    deploy ;;
  *)         exit 0
esac
